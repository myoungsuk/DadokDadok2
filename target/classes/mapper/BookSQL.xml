<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.multi.mini6.bookpage.dao.BookDAO">

	<insert id="insertOne" parameterType="BookVO">
		INSERT INTO book (book_ISBN, book_name, book_content, book_author, book_publisher, book_createdAt, book_genre, book_img)
		VALUES (#{bookISBN}, #{bookName}, #{bookContent}, #{bookAuthor}, #{bookPublisher}, #{bookCreatedAt}, #{bookGenre}, #{bookImg})
	</insert>

	<!-- 특정 ISBN을 가진 책 조회 -->
	<select id="selectOneByISBN" parameterType="String" resultType="BookVO">
		SELECT * FROM book WHERE book_ISBN = #{book_ISBN}
	</select>

	<!-- 특정 책 이름을 가진 책 조회 -->
	<select id="selectOneByName" parameterType="String" resultType="BookVO">
		SELECT * FROM book WHERE book_name = #{book_name}
	</select>

	<!-- 모든 책 조회 -->
	<select id="selectAll" resultType="BookVO">
		SELECT * FROM book
	</select>

	<!-- 도서 총 개수 -->
	<select id="getBookCount" resultType="int">
		SELECT COUNT(*) FROM book
	</select>

	<!-- 도서 정보 페이징 처리 리스트 -->
	<select id="getPagedBooks" parameterType="PageVO" resultType="BookVO">
		SELECT * FROM (
						  SELECT
							  ROW_NUMBER() OVER (ORDER BY book_ISBN DESC) AS book_no,
								  book_ISBN,
							  book_name,
							  book_content,
							  book_author,
							  book_publisher,
							  book_createdAt,
							  book_genre,
							  book_img
						  FROM book
					  ) row_book
		WHERE row_book.book_no BETWEEN #{start} AND #{end};
	</select>



	<!-- 책 정보 업데이트 -->
	<update id="updateOne" parameterType="BookVO">
		UPDATE book
		SET book_name = #{bookName}, book_content = #{bookContent}, book_author = #{bookAuthor},
			book_publisher = #{bookPublisher}, book_createdAt = #{bookCreatedAt}, book_genre = #{bookGenre}, book_img = #{bookImg}
		WHERE book_ISBN = #{book_ISBN}
	</update>

	<!-- 책 삭제 -->
	<delete id="deleteOne" parameterType="String">
		DELETE FROM book WHERE book_ISBN = #{book_ISBN}
	</delete>

	<!-- 책 검색 -->
	<select id="searchBook" parameterType="String" resultType="BookVO">
		SELECT * FROM book
		WHERE book_ISBN LIKE CONCAT('%', #{book_ISBN}, '%')
		   OR book_name LIKE CONCAT('%', #{book_name}, '%')
		   OR book_content LIKE CONCAT('%', #{book_content}, '%')
		   OR book_author LIKE CONCAT('%', #{book_author}, '%')
		   OR book_publisher LIKE CONCAT('%', #{book_publisher}, '%')
		   OR CAST(book_genre AS CHAR) LIKE CONCAT('%', #{book_genre}, '%')
	</select>


	<!-- 도서 엑셀 파일 업로드 -->
	<!-- ISBN으로 이미 존재하는 책이 있는지 확인하는 쿼리 -->
	<select id="existsByIsbn" parameterType="String" resultType="int">
		SELECT COUNT(1) FROM books WHERE isbn = #{isbn}
	</select>
	<!-- booksLibraries 테이블에 isbn이랑 lib_code가 존재하는지 확인하는 쿼리 -->
	<select id="existsByIsbnAndLibCode" parameterType="booksLibrariesVO" resultType="int">
		SELECT COUNT(1) FROM booksLibraries WHERE isbn = #{isbn} AND lib_code = #{lib_code}
	</select>

	<!-- 새로운 책을 삽입하는 쿼리 -->
	<insert id="insertBooks" parameterType="booksVO">
		INSERT INTO books (title, author, publisher, year_of_publication, isbn, set_isbn,
						   additional_symbol, volume, subject_classification_number)
		VALUES (#{title}, #{author}, #{publisher}, #{yearOfPublication}, #{isbn}, #{setIsbn},
				#{additionalSymbol}, #{volume}, #{subjectClassificationNumber})
	</insert>
	<!-- 도서와도서관 정보를 삽입 -->
	<insert id="insertBooksLibraries" parameterType="booksLibrariesVO">
		INSERT INTO booksLibraries ( isbn, lib_code, numberOfCopies, numberOfLoans)
		VALUES (#{isbn}, #{lib_code}, #{numberOfCopies}, #{numberOfLoans})
	</insert>

	<!-- 업로드 히스토리 테이블에 업로드 정보를 삽입하는 쿼리 -->
	<insert id="insertUploadHistory" parameterType="booksHistoryVO">
		INSERT INTO book_upload_history (file_name, upload_date, file_size, file_type)
		VALUES (#{file_name}, now(), #{file_size}, #{file_type})
	</insert>

	<select id="selectAllBooksHistory" resultType="BooksHistoryVO">
		SELECT * FROM book_upload_history
		ORDER BY upload_date DESC
	</select>

	<!-- ISBN으로 책을 조회하는 쿼리 -->
	<select id="findByIsbn" resultType="BooksVO">
		SELECT * FROM books WHERE isbn = #{isbn}
	</select>

	<!-- 같은 ISBN을 가진 책을 조회하는 쿼리 -->
	<select id="findDuplicatedIsbns" resultType="String">
		SELECT isbn FROM books WHERE isbn IN
		<foreach item="isbn" collection="list" open="(" separator="," close=")">
			#{isbn}
		</foreach>
	</select>

	<!-- 책 정보를 업데이트하는 쿼리 -->
	<update id="updateBook">
		UPDATE books
		SET
		<foreach item="entry" index="key" collection="updatedFields">
			<if test="entry.value != null">
				${key} = #{entry.value},
			</if>
		</foreach>
		WHERE isbn = #{isbn}
	</update>

	<!-- 도서관의 도서 정보를 업데이트 -->
	<update id="updateBooksLibraries" parameterType="booksLibrariesVO">
		UPDATE booksLibraries
		SET
			numberOfCopies = #{numberOfCopies},
			numberOfLoans = #{numberOfLoans}
		WHERE isbn = #{isbn} AND lib_code = #{lib_code}
	</update>

 	<!-- 첨부파일 업로드를 위한 도서관 검색 도서관명, 도서관 코드-->
	<select id="searchLibrary" parameterType="String" resultType="librariesVO">
		SELECT 도서관명, lib_code FROM libraries
		WHERE 도서관명 LIKE CONCAT('%', #{searchKeyword}, '%')
		   OR lib_code LIKE CONCAT('%', #{searchKeyword}, '%');
	</select>

	<!-- books 총 개수 -->
	<select id="getBooksCount" resultType="int">
		SELECT COUNT(*) FROM books
	</select>

	<!-- booksLibraries 총 개수 -->
	<select id="getBooksLibrariesCount" resultType="int">
		SELECT COUNT(*) FROM booksLibraries
	</select>

</mapper>
