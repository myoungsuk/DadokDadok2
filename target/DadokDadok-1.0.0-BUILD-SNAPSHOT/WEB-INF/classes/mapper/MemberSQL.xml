<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.multi.mini6.loginpage.dao.MemberDAO">


    <!-- 맴버변수의 이름과 DB컬럼의 이름이 일치하지 않을 때 resultMap을 사용해주세요 -->
    <!--List는 collection으로 받고 result는 단일 변수들을 받습니다. -->
        <!--  조인 등으로 기존 VO와 구조가 다른 데이터가 리턴되는 경우 resultMap으로 묶습니다.
        result의 property에는 VO의 변수명, column은 DB상의 컬럼명을 넣습니다.
        이러면 VO의 변수명과 DB상의 컬럼명이 달라도 매칭이 됩니다. -->
    <resultMap id="memberMap" type="com.multi.mini6.loginpage.vo.MemberVO">
        <id property="member_id" column="member_id"/>
        <result property="email" column="email"/>
        <result property="password" column="password"/>
        <result property="name" column="name"/>
        <result property="phoneNum" column="phone_num"/>
        <result property="zipcode" column="zipcode"/>
        <result property="address" column="address"/>
        <result property="detail_address" column="detail_address"/>
        <result property="createdAt" column="createdAt"/>
        <result property="nickname" column="nickname"/>
        <result property="info" column="info"/>
        <result property="userImg" column="user_img"/>
        <collection property="authList" resultMap="authorityMap">
        </collection>
    </resultMap>

    <resultMap id="authorityMap" type="com.multi.mini6.loginpage.vo.AuthorityVO">
        <id property="authority_id" column="authority_id"/>
        <result property="email" column="email"/>
        <result property="authority_name" column="authority_name"/>
    </resultMap>

    <!-- 멤버 테이블 가져오기 -->
    <select id="getMemberList" resultType="MemberVO">
        SELECT *
        FROM member
    </select>

    <!-- 이메일 중복확인 -->
    <select id="checkEmail" resultType="int">
        SELECT COUNT(*)
        FROM member
        WHERE email = #{email}
    </select>


    <!-- 회원가입 -->
    <insert id="insertMember">
        INSERT INTO member
        (email, password, name, phone_num, nickname, info, user_img, zipcode, address, detail_address)
        VALUES (#{email}, #{password}, #{name}, #{phoneNum}, #{nickname}, #{info}, #{userImg}, #{zipcode}, #{address}, #{detail_address})
    </insert>


    <!-- 권한 부여 -->
    <insert id="insertMemberAuthority">
        INSERT INTO authority (email, authority_name)
        VALUES
        <foreach collection="authList" item="authority" separator="," >
            (#{authority.email}, #{authority.authority_name})
        </foreach>
    </insert>

    <!-- 회원 정보 가져오기 -->
    <select id="getMember" resultMap="memberMap">
        SELECT
            m.member_id,
            m.email,
            m.password,
            m.name,
            m.phone_num,
            m.createdAt,
            m.nickname,
            m.info,
            m.user_img,
            m.zipcode,
            m.address,
            m.detail_address,
            a.authority_id,
            a.authority_name
        FROM
            member m
                LEFT OUTER JOIN authority a ON m.email = a.email
        WHERE
            m.email = #{email}
    </select>


    <select id="getMemberById" resultMap="memberMap">
        SELECT
            m.member_id,
            m.email,
            m.password,
            m.name,
            m.phone_num,
            m.createdAt,
            m.nickname,
            m.info,
            m.user_img,
            m.zipcode,
            m.address,
            m.detail_address,
            a.authority_id,
            a.authority_name
        FROM
            member m
                LEFT OUTER JOIN authority a ON m.email = a.email
        WHERE
            m.member_id = #{member_id}
    </select>


    <!-- 회원정보 수정 -->
    <update id="updateMember">
        UPDATE member
        SET
            nickname  = #{nickname},
            info      = #{info},
            zipcode   = #{zipcode},
            address   = #{address},
            detail_address = #{detail_address}
        WHERE member_id = #{member_id}
    </update>

    <!-- 프로필 사진 수정 -->
    <update id="updateProfileImg" parameterType="map">
        UPDATE member
        SET user_img = #{userImg}
        WHERE email = #{email}
    </update>
    <!-- 사용자의 프로필 이미지 경로를 가져오는 쿼리 -->
    <select id="getProfileImgPathByEmail" resultType="string" parameterType="string">
        SELECT user_img
        FROM member
        WHERE email = #{email}
    </select>
    <!-- 비밀번호 변경 -->
    <!-- Example MyBatis Mapper Query -->
    <update id="changePassword">
        UPDATE member
        SET password = #{newPassword}
        WHERE email = #{email}
    </update>

    <!-- 비밀번호 변경을 위한 현재 비밀번호 확인 -->
    <select id="getCurrentHashedPassword" parameterType="String" resultType="String">
        SELECT password
        FROM member
        WHERE email = #{email}
    </select>



    <!-- 권한 삭제 -->
    <delete id="deleteMemberAuthority">
        DELETE
        FROM authority
        WHERE email = #{email}
    </delete>
    <!-- 탈퇴 -->
    <delete id="deleteMember">
        DELETE
        FROM member
        WHERE member_id = #{member_id}
    </delete>
    <!-- 탈퇴 사유 -->
    <insert id="insertMemberDeleteReason">
        INSERT INTO member_delete_reason (delete_email, member_delete_reason)
        VALUES (#{deleteEmail}, #{memberDeleteReason})
    </insert>

</mapper>
